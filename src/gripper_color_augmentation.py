import time
from typing import Tuple

import cv2
import numpy as np

from utils import load_video_frames, load_gripper_values, save_video


class GripperColorAugmentation:
    def __init__(self, augmentation_masks_path: str):
        self.gripper_values, self.masks = load_augmentation_masks(augmentation_masks_path)

    def transform(self, frames: np.ndarray, gripper_values: np.ndarray, inplace: bool = False) -> np.ndarray:
        if not inplace:
            frames = frames.copy()
        masks = self._get_masks(gripper_values)

        # perform hue shift
        hsv = np.array([cv2.cvtColor(frame, cv2.COLOR_RGB2HSV) for frame in frames])
        hue_shift = np.random.rand() * 180
        hsv[:, :, :, 0] = (hsv[:, :, :, 0] + hue_shift) % 180

        shifted_rgb = np.array([cv2.cvtColor(frame, cv2.COLOR_HSV2RGB) for frame in hsv])

        # apply hue shift to regions masked for gripper
        frames[masks] = shifted_rgb[masks]

        return frames

    def _get_masks(self, gripper_values: np.ndarray) -> np.ndarray:
        lower_indices = self.gripper_values.searchsorted(gripper_values)
        upper_indices = (lower_indices + 1).clip(0, self.gripper_values.shape[0] - 1)

        upper_masks = self.masks[upper_indices]
        lower_masks = self.masks[lower_indices]

        interpolated_masks = lower_masks | upper_masks

        return interpolated_masks


def load_augmentation_masks(augmentation_masks_path: str) -> Tuple[np.ndarray, np.ndarray]:
    """
    Loads augmentation masks generated by generate_augmentation_masks.py.

    :param augmentation_masks_path: the path to the .npy pickle
    :return: gripper_values, masks
    """
    augmentation_masks_dict = np.load(augmentation_masks_path, allow_pickle=True).item()
    return augmentation_masks_dict.get('gripper_values'), augmentation_masks_dict.get('masks')


def main():
    augmentation = GripperColorAugmentation('../augmentation_masks/augmentation_masks.npy')
    frames = load_video_frames('../reference_data/compressed_video_h264.mp4')[:-1]
    gripper_values = load_gripper_values('../reference_data/labels.json')

    start_time = time.time()
    augmentation.transform(frames, gripper_values, inplace=True)
    augmentation_time = time.time() - start_time

    print(f'Augmentation took {augmentation_time}s for {frames.shape[0]} frames.')

    save_video(frames, '../out/transformed.mp4')


if __name__ == '__main__':
    main()
